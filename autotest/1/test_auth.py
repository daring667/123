from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager
import time
import csv
import os
import logging
from dotenv import load_dotenv
import os

load_dotenv()

# Configure logging
logging.basicConfig(level=logging.INFO, filename="tax_audit_scraper.log", format="%(asctime)s - %(levelname)s - %(message)s")

LOGIN = os.getenv("LOGIN")
PASSWORD = os.getenv("PASSWORD")
BASE_URL = "https://id.adata.kz/"  # URL —Å–∞–π—Ç–∞
OUTPUT_CSV = "auth_results.csv"
OUTPUT_TXT = "auth_results.txt"
SCREENSHOT_DIR = "screenshots"

def init_driver():
    """Initialize Chrome WebDriver with options."""
    chrome_options = Options()
    chrome_options.add_argument("--start-maximized")
    return webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=chrome_options)

def wait_for_element(driver, by, value, timeout=20):
    """Wait for element to be present."""
    return WebDriverWait(driver, timeout).until(EC.presence_of_element_located((by, value)))

def save_screenshot(driver, test_name, filename):
    """Save screenshot for a specific test."""
    test_dir = os.path.join(SCREENSHOT_DIR, test_name)
    os.makedirs(test_dir, exist_ok=True)
    screenshot_path = os.path.join(test_dir, filename)
    driver.save_screenshot(screenshot_path)
    logging.info(f"Saved screenshot for test {test_name}: {screenshot_path}")

def write_result(test_name, result):
    """Write test result to CSV and TXT."""
    file_exists = os.path.isfile(OUTPUT_CSV)
    with open(OUTPUT_CSV, "a", newline="", encoding='utf-8') as f:
        writer = csv.writer(f)
        if not file_exists:
            writer.writerow(["–¢–µ—Å—Ç", "–†–µ–∑—É–ª—å—Ç–∞—Ç"])
        writer.writerow([test_name, result])
    
    with open(OUTPUT_TXT, "a", encoding='utf-8') as f:
        f.write(f"–¢–µ—Å—Ç: {test_name}, –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}\n")
    
    logging.info(f"Wrote result for test {test_name}: {result}")

def login(driver):
    """Perform login action."""
    try:
        driver.get(BASE_URL)
        wait_for_element(driver, By.XPATH, "//div[contains(., '–í—Ö–æ–¥') and contains(@class, 'cursor-pointer')]").click()
        
        email_field = wait_for_element(driver, By.ID, "–í–≤–µ–¥–∏—Ç–µ email")
        password_field = wait_for_element(driver, By.ID, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å")
        login_button = wait_for_element(driver, By.XPATH, "//button[span[text()='–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å']]")
        
        email_field.send_keys(LOGIN)
        password_field.send_keys(PASSWORD)
        login_button.click()
        
        WebDriverWait(driver, 20).until(EC.url_contains("/dashboard"))
        logging.info("Successfully logged in")
        print("üü¢ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
        return True
    except Exception as e:
        logging.error(f"Login error: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        save_screenshot(driver, "login", f"error_login_{int(time.time())}.png")
        return False

def test_user_registration(driver):
    """Test user registration."""
    try:
        driver.get(BASE_URL + "register")  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –ø—É—Ç—å
        email_field = wait_for_element(driver, By.ID, "–í–≤–µ–¥–∏—Ç–µ email")  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID
        password_field = wait_for_element(driver, By.ID, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å")  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID
        confirm_password_field = wait_for_element(driver, By.ID, "confirm_password")  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID
        submit_button = wait_for_element(driver, By.XPATH, "//button[span[text()='–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å']]")
        
        email_field.send_keys("newuser@adata.kz")
        password_field.send_keys(PASSWORD)
        confirm_password_field.send_keys(PASSWORD)
        submit_button.click()
        
        success_message = wait_for_element(driver, By.CLASS_NAME, "success-message")  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä
        if "Registration successful" in success_message.text:
            logging.info("Registration test passed")
            print("üü¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
            return "–£—Å–ø–µ—Ö"
        else:
            logging.warning("Registration test failed: unexpected success message")
            print("‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ")
            return "–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    except Exception as e:
        logging.error(f"Registration test error: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        save_screenshot(driver, "registration", f"error_registration_{int(time.time())}.png")
        return f"–û—à–∏–±–∫–∞: {str(e)}"

def test_remember_me(driver):
    """Test 'Remember me' checkbox."""
    try:
        driver.get(BASE_URL + "login")
        wait_for_element(driver, By.XPATH, "//div[contains(., '–í—Ö–æ–¥') and contains(@class, 'cursor-pointer')]").click()
        
        remember_me = wait_for_element(driver, By.ID, "check")
        
        # Check if checkbox is selected by default
        if not remember_me.is_selected():
            remember_me.click()
        assert remember_me.is_selected(), "–ß–µ–∫–±–æ–∫—Å '–ó–∞–ø–æ–º–Ω–∏—Ç—å –º–µ–Ω—è' –Ω–µ –≤–∫–ª—é—á–µ–Ω"
        
        # Uncheck and verify
        remember_me.click()
        assert not remember_me.is_selected(), "–ß–µ–∫–±–æ–∫—Å '–ó–∞–ø–æ–º–Ω–∏—Ç—å –º–µ–Ω—è' –Ω–µ –≤—ã–∫–ª—é—á–µ–Ω"
        
        # Check again
        remember_me.click()
        assert remember_me.is_selected(), "–ß–µ–∫–±–æ–∫—Å '–ó–∞–ø–æ–º–Ω–∏—Ç—å –º–µ–Ω—è' –Ω–µ –≤–∫–ª—é—á–µ–Ω –ø–æ–≤—Ç–æ—Ä–Ω–æ"
        
        logging.info("Remember me test passed")
        print("üü¢ –¢–µ—Å—Ç '–ó–∞–ø–æ–º–Ω–∏—Ç—å –º–µ–Ω—è' —É—Å–ø–µ—à–µ–Ω")
        return "–£—Å–ø–µ—Ö"
    except Exception as e:
        logging.error(f"Remember me test error: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ '–ó–∞–ø–æ–º–Ω–∏—Ç—å –º–µ–Ω—è': {e}")
        save_screenshot(driver, "remember_me", f"error_remember_me_{int(time.time())}.png")
        return f"–û—à–∏–±–∫–∞: {str(e)}"

def test_forgot_password_button(driver):
    """Test 'Forgot password?' button."""
    try:
        driver.get(BASE_URL + "login")
        wait_for_element(driver, By.XPATH, "//div[contains(., '–í—Ö–æ–¥') and contains(@class, 'cursor-pointer')]").click()
        
        forgot_password = wait_for_element(driver, By.ID, "forgot_password")  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID
        forgot_password.click()
        
        modal = wait_for_element(driver, By.ID, "password_reset_modal")  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID
        assert modal.is_displayed(), "–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è"
        
        logging.info("Forgot password button test passed")
        print("üü¢ –¢–µ—Å—Ç –∫–Ω–æ–ø–∫–∏ '–ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å?' —É—Å–ø–µ—à–µ–Ω")
        return "–£—Å–ø–µ—Ö"
    except Exception as e:
        logging.error(f"Forgot password button test error: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–Ω–æ–ø–∫–∏ '–ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å?': {e}")
        save_screenshot(driver, "forgot_password", f"error_forgot_password_{int(time.time())}.png")
        return f"–û—à–∏–±–∫–∞: {str(e)}"

def test_password_reset(driver):
    """Test password reset functionality."""
    try:
        driver.get(BASE_URL + "forgot-password")  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –ø—É—Ç—å
        email_field = wait_for_element(driver, By.ID, "reset_email")  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID
        submit_button = wait_for_element(driver, By.XPATH, "//button[span[text()='–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å']]")
        
        email_field.send_keys("testuser@adata.kz")
        assert email_field.get_attribute("value") == "testuser@adata.kz", "–ú–∞—Å–∫–∞ email –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
        
        submit_button.click()
        
        notification = wait_for_element(driver, By.CLASS_NAME, "notification")  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä
        assert "–ù–∞ –≤–∞—à—É –ø–æ—á—Ç—É –º—ã –≤—ã—à–ª–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Å–±—Ä–æ—Å—É –ø–∞—Ä–æ–ª—è" in notification.text, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è"
        
        logging.info("Password reset test passed")
        print("üü¢ –¢–µ—Å—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è —É—Å–ø–µ—à–µ–Ω")
        return "–£—Å–ø–µ—Ö"
    except Exception as e:
        logging.error(f"Password reset test error: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è: {e}")
        save_screenshot(driver, "password_reset", f"error_password_reset_{int(time.time())}.png")
        return f"–û—à–∏–±–∫–∞: {str(e)}"

def main():
    """Run all authentication tests."""
    os.makedirs(SCREENSHOT_DIR, exist_ok=True)
    driver = init_driver()
    try:
        # Test registration
        print("\nüîé –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
        result = test_user_registration(driver)
        write_result("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", result)
        
        # Test login
        print("\nüîé –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        result = login(driver)
        write_result("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è", "–£—Å–ø–µ—Ö" if result else "–û—à–∏–±–∫–∞")
        
        # Test remember me
        print("\nüîé –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–∞ '–ó–∞–ø–æ–º–Ω–∏—Ç—å –º–µ–Ω—è'")
        result = test_remember_me(driver)
        write_result("–ó–∞–ø–æ–º–Ω–∏—Ç—å –º–µ–Ω—è", result)
        
        # Test forgot password button
        print("\nüîé –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ '–ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å?'")
        result = test_forgot_password_button(driver)
        write_result("–ö–Ω–æ–ø–∫–∞ '–ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å?'", result)
        
        # Test password reset
        print("\nüîé –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è")
        result = test_password_reset(driver)
        write_result("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è", result)
        
    finally:
        driver.quit()
        print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        logging.info("All tests completed")

if __name__ == "__main__":
    main()