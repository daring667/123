from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from webdriver_manager.chrome import ChromeDriverManager
import time

# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ
LOGIN = ""
PASSWORD = ""

# –§–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º –ë–ò–ù–æ–≤
BIN_FILE = "bin_list.txt"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Chrome WebDriver
def init_driver():
    chrome_options = Options()
    chrome_options.add_argument("--start-maximized")
    # chrome_options.add_argument("--headless")  # –ú–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–µ–∑ UI
    return webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=chrome_options)

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–∞ —Å–∞–π—Ç–µ ADATA
def login(driver):
    driver.get("https://pk.adata.kz/")
    time.sleep(5)

    # –ù–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É "–í—Ö–æ–¥"
    try:
        login_button = driver.find_element(By.XPATH, "//div[contains(@class, 'cursor-pointer') and contains(., '–í—Ö–æ–¥')]")
        login_button.click()
        print("üü¢ –ö–Ω–æ–ø–∫–∞ '–í—Ö–æ–¥' –Ω–∞–∂–∞—Ç–∞.")
    except Exception as e:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞:", e)
        return

    time.sleep(5)

    # –í–≤–æ–¥ email –∏ –ø–∞—Ä–æ–ª—è –Ω–∞ id.adata.kz
    try:
        email_input = driver.find_element(By.XPATH, "//input[@type='email' and @id='–í–≤–µ–¥–∏—Ç–µ email']")
        password_input = driver.find_element(By.XPATH, "//input[@type='password' and @id='–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å']")

        email_input.clear()
        email_input.send_keys(LOGIN)
        password_input.clear()
        password_input.send_keys(PASSWORD)

        submit_button = driver.find_element(By.XPATH, "//button[contains(., '–í–æ–π—Ç–∏')]")
        submit_button.click()

        print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:", e)

    time.sleep(5)

# üîç –ü–æ–∏—Å–∫ –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ –ë–ò–ù
def search_company(driver, bin_value):
    try:
        # –ü–æ–∏—Å–∫ –ø–æ–ª—è —Å id (–ø–æ–∏—Å–∫ –ø–æ placeholder/id —Å–æ–≤–ø–∞–¥–∞–µ—Ç)
        search_input = driver.find_element(By.XPATH, "//input[@type='search' and @id='–í–≤–µ–¥–∏—Ç–µ –ò–ò–ù, –ë–ò–ù, –§–ò–û, –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏']")
        search_input.clear()
        search_input.send_keys(bin_value)
        time.sleep(1)

        # –ö–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ "–ù–∞–π—Ç–∏"
        search_button = driver.find_element(By.XPATH, "//button[contains(., '–ù–∞–π—Ç–∏')]")
        search_button.click()
        print(f"üîé –ü–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω –¥–ª—è –ë–ò–ù: {bin_value}")
        time.sleep(3)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –ë–ò–ù {bin_value}: {e}")


# üìÑ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∫–æ–º–ø–∞–Ω–∏–∏
def open_company_profile(driver):
    try:
        # –ñ–¥—ë–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        time.sleep(2)
        # –ü–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å–ø–∏—Å–∫–µ ‚Äî —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–æ–º–ø–∞–Ω–∏—é
        first_result = driver.find_element(By.XPATH, "//a[contains(@href, '/company/')]")
        first_result.click()
        print("üü¢ –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∫–∞—Ä—Ç–æ—á–∫–µ –∫–æ–º–ø–∞–Ω–∏–∏.")
        time.sleep(3)
        return True
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∫–æ–º–ø–∞–Ω–∏–∏: {e}")
        return False


# üßæ –ü–µ—Ä–µ–π—Ç–∏ –≤ —Ä–∞–∑–¥–µ–ª "–ë–ª–∞–≥–æ–Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å ‚Üí –ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ"
def go_to_reliability_tab(driver):
    try:
        driver.find_element(By.XPATH, "//a[contains(text(), '–ë–ª–∞–≥–æ–Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å')]").click()
        time.sleep(2)
        driver.find_element(By.XPATH, "//a[contains(text(), '–ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ')]").click()
        time.sleep(2)
    except:
        print("‚ö†Ô∏è –†–∞–∑–¥–µ–ª '–ë–ª–∞–≥–æ–Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å' –Ω–µ –Ω–∞–π–¥–µ–Ω")

# üìå –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –≤—ã–µ–∑–¥–Ω—ã–º –ø—Ä–æ–≤–µ—Ä–∫–∞–º
def check_customs_status(driver):
    try:
        label = "–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ –≤—ã–µ–∑–¥–Ω—ã–µ —Ç–∞–º–æ–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ 1-–æ–µ –ø–æ–ª—É–≥–æ–¥–∏–µ 2025 –≥–æ–¥–∞"
        xpath = f"//*[contains(text(), '{label}')]/following-sibling::*"
        status = driver.find_element(By.XPATH, xpath).text.strip()
        return status
    except:
        return "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"

# ‚ñ∂Ô∏è –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–æ –ë–ò–ù–∞–º
def main():
    with open(BIN_FILE, "r") as f:
        bin_list = [line.strip() for line in f if line.strip()]

    driver = init_driver()
    login(driver)

    for bin_value in bin_list:
        print(f"\nüîé –ü—Ä–æ–≤–µ—Ä–∫–∞ –ë–ò–ù: {bin_value}")
        try:
            search_company(driver, bin_value)
            if not open_company_profile(driver):
                continue
            go_to_reliability_tab(driver)
            result = check_customs_status(driver)
            print(f"üìå –°—Ç–∞—Ç—É—Å –Ω–∞ —Å–∞–π—Ç–µ: {result}")
            driver.back()
            time.sleep(2)
            driver.back()
            time.sleep(2)
        except Exception as e:
            print(f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ë–ò–ù {bin_value}: {e}")
            continue

    driver.quit()
    print("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ.")

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    main()
    
    
    
    
    
    
    
    
    
    
    
    # def check_tax_status(driver, bin_value):
    # try:
    #     label = "–í —Å–ø–∏—Å–∫–µ –∫–æ–º–ø–∞–Ω–∏–π –ø–æ–ø–∞–≤—à–∏—Ö –ø–æ–¥ –Ω–∞–ª–æ–≥–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –≤ 1-–æ–º –ø–æ–ª—É–≥–æ–¥–∏–∏ 2025 –≥–æ–¥–∞"
    #     xpath = f"//div[contains(@class, 'text-deepblue-900') and contains(.//span, '{label}')]//div[contains(@class, 'flex w-full items-start md:w-fit')]"
    #     status_element = wait_for_element(driver, By.XPATH, xpath)
    #     status_text = status_element.text.strip()
    #     print(f"üìå –ù–∞–π–¥–µ–Ω —Å—Ç–∞—Ç—É—Å: {status_text}")
    #     logging.info(f"Tax audit status for BIN {bin_value}: {status_text}")
    #     return status_text if status_text in ["–î–∞", "–ù–µ—Ç"] else "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"
    # except Exception as e:
    #     logging.error(f"Error checking tax audit status for BIN {bin_value}: {e}")
    #     print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞: {e}")
    #     save_screenshot(driver, bin_value, f"debug_tax_status_{bin_value}.png")
    #     return "–û—à–∏–±–∫–∞"
    
    
    # def check_customs_status(driver, bin_value):
    # try:
    #     label = "–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ –≤—ã–µ–∑–¥–Ω—ã–µ —Ç–∞–º–æ–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ 1-–æ–µ –ø–æ–ª—É–≥–æ–¥–∏–µ 2025 –≥–æ–¥–∞"
    #     xpath = f"//div[contains(@class, 'text-deepblue-900') and contains(.//span, '{label}')]//div[contains(@class, 'flex w-full items-start md:w-fit')]"
    #     status_element = wait_for_element(driver, By.XPATH, xpath)
    #     status_text = status_element.text.strip()
    #     print(f"üìå –ù–∞–π–¥–µ–Ω —Å—Ç–∞—Ç—É—Å: {status_text}")
    #     logging.info(f"Customs status for BIN {bin_value}: {status_text}")
    #     return status_text if status_text in ["–î–∞", "–ù–µ—Ç"] else "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"
    # except Exception as e:
    #     logging.error(f"Error checking customs status for BIN {bin_value}: {e}")
    #     print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞: {e}")
    #     save_screenshot(driver, bin_value, f"debug_customs_status_{bin_value}.png")
    #     return "–û—à–∏–±–∫–∞"
